name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  GO_VERSION: '1.21'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check formatting
      run: npm run format:check

    - name: Run linter
      run: npm run lint

  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    needs: lint-and-format
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16.x, 18.x, 20.x]
        include:
          # Test LTS versions
          - os: ubuntu-latest
            node-version: 14.x
          - os: windows-latest
            node-version: 14.x
          - os: macos-latest
            node-version: 14.x

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Check bundle size
      run: npm run size-check

    - name: Run unit tests
      run: npm test

    - name: Run integration tests
      run: npm run test:integration
      timeout-minutes: 10

    - name: Run compatibility tests
      run: npm run test:compatibility
      timeout-minutes: 5

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18.x'
      with:
        name: build-artifacts
        path: |
          lib/
          wasm/
          docs/

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Run performance benchmarks
      run: npm run benchmark

    - name: Run performance tests
      run: npm run test:performance
      timeout-minutes: 15

    - name: Comment PR with performance results
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const resultsPath = path.join(process.cwd(), 'benchmark-results.json');
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              
              let comment = '## üöÄ Performance Benchmark Results\\n\\n';
              comment += '| Test | Avg Time | Ops/Sec |\\n';
              comment += '|------|----------|---------|\\n';
              
              for (const result of results.results) {
                comment += `| ${result.name} | ${result.avgTime}ms | ${result.opsPerSec} |\\n`;
              }
              
              comment += '\\n*Benchmarks run on GitHub Actions runner*';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not post performance results:', error.message);
          }

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Run final tests
      run: npm run test:ci

    - name: Check bundle size
      run: npm run size-check

    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub release assets
      run: |
        tar -czf gocommander-${{ github.event.release.tag_name }}.tar.gz lib/ wasm/ docs/ examples/
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./gocommander-${{ github.event.release.tag_name }}.tar.gz
        asset_name: gocommander-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Build project and docs
      run: npm run build

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        cname: gocommander.dev

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'release')

    steps:
    - name: Notify Slack on Success
      if: needs.build-and-test.result == 'success' && needs.security-scan.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '‚úÖ GoCommander CI/CD pipeline completed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on Failure
      if: needs.build-and-test.result == 'failure' || needs.security-scan.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '‚ùå GoCommander CI/CD pipeline failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}