name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18.x'
  GO_VERSION: '1.21'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        else
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
        fi

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi

    - name: Check if version exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if npm view gocommander@$VERSION version 2>/dev/null; then
          echo "Version $VERSION already exists on npm"
          exit 1
        fi

    - name: Validate changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
          echo "Version $VERSION not found in CHANGELOG.md"
          echo "Please update CHANGELOG.md before releasing"
          exit 1
        fi

  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    needs: validate-release
    
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Run comprehensive tests
      run: npm run test:ci

    - name: Check bundle size
      run: npm run size-check

    - name: Run performance benchmarks
      run: npm run benchmark
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18.x'

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18.x'
      with:
        name: release-artifacts
        path: |
          lib/
          wasm/
          docs/
          examples/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Extract changelog section for this version
        awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
        
        # Add performance and compatibility info
        echo "" >> release_notes.md
        echo "## Performance" >> release_notes.md
        echo "- 2-5x faster parsing than Commander.js" >> release_notes.md
        echo "- Optimized WASM binary size" >> release_notes.md
        echo "- Zero runtime dependencies" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Compatibility" >> release_notes.md
        echo "- Node.js 14+" >> release_notes.md
        echo "- Windows, macOS, Linux" >> release_notes.md
        echo "- 100% Commander.js API compatibility" >> release_notes.md
        
        # Set output
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.tag }}
        release_name: GoCommander ${{ needs.validate-release.outputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, create-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Update package version
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        npm version $VERSION --no-git-tag-version

    - name: Build project
      run: npm run build

    - name: Final validation
      run: |
        npm run test:ci
        npm run size-check

    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Verify publication
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        sleep 30  # Wait for npm to propagate
        npm view gocommander@$VERSION version

  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, create-release, publish-npm]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Create release archives
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Create source archive
        tar -czf gocommander-$VERSION-src.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=coverage \
          --exclude=.nyc_output \
          .
        
        # Create binary archive
        tar -czf gocommander-$VERSION-bin.tar.gz \
          lib/ wasm/ docs/ examples/ README.md LICENSE CHANGELOG.md package.json
        
        # Create Windows zip
        zip -r gocommander-$VERSION-bin.zip \
          lib/ wasm/ docs/ examples/ README.md LICENSE CHANGELOG.md package.json

    - name: Upload source archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./gocommander-${{ needs.validate-release.outputs.version }}-src.tar.gz
        asset_name: gocommander-${{ needs.validate-release.outputs.version }}-src.tar.gz
        asset_content_type: application/gzip

    - name: Upload binary archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./gocommander-${{ needs.validate-release.outputs.version }}-bin.tar.gz
        asset_name: gocommander-${{ needs.validate-release.outputs.version }}-bin.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./gocommander-${{ needs.validate-release.outputs.version }}-bin.zip
        asset_name: gocommander-${{ needs.validate-release.outputs.version }}-bin.zip
        asset_content_type: application/zip

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, publish-npm]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Build documentation
      run: npm run build:docs

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        cname: gocommander.dev

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [validate-release, publish-npm, upload-assets, update-documentation]
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🎉 GoCommander ${{ needs.validate-release.outputs.version }} released successfully!
          
          📦 NPM: https://www.npmjs.com/package/gocommander
          🏷️ GitHub: https://github.com/rohitsoni-dev/gocommander/releases/tag/${{ needs.validate-release.outputs.tag }}
          📚 Docs: https://gocommander.dev
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create post-release issue
      uses: actions/github-script@v6
      with:
        script: |
          const version = '${{ needs.validate-release.outputs.version }}';
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Post-release tasks for v${version}`,
            body: `## Post-release checklist for GoCommander v${version}
            
            - [ ] Verify npm package is available and working
            - [ ] Test installation on different platforms
            - [ ] Update any dependent projects
            - [ ] Monitor for any issues or bug reports
            - [ ] Update social media announcements
            - [ ] Consider blog post for major releases
            
            **Release Links:**
            - NPM: https://www.npmjs.com/package/gocommander
            - GitHub: https://github.com/rohitsoni-dev/gocommander/releases/tag/v${version}
            - Documentation: https://gocommander.dev
            `,
            labels: ['release', 'post-release']
          });

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, create-release, publish-npm, upload-assets, update-documentation]
    if: failure()
    
    steps:
    - name: Notify Slack on Failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ GoCommander release ${{ needs.validate-release.outputs.version }} failed!
          
          Please check the GitHub Actions logs for details.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}