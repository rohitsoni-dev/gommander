{
  "timestamp": "2025-10-24T10:29:57.825Z",
  "platform": "win32",
  "arch": "x64",
  "nodeVersion": "v24.1.0",
  "isProductionReady": false,
  "criticalFailures": 2,
  "passedValidations": 2,
  "totalValidations": 4,
  "successRate": "50.0%",
  "results": {
    "testSuite": {
      "passed": false,
      "details": {
        "error": "Command failed: npm test\n● Validation Warning:\n\n  Unknown option \"testTimeout\" with value 10000 was found.\n  This is probably a typing mistake. Fixing it will remove this message.\n\n  Configuration Documentation:\n  https://jestjs.io/docs/configuration\n\n● Validation Warning:\n\n  Unknown option \"testTimeout\" with value 60000 was found.\n  This is probably a typing mistake. Fixing it will remove this message.\n\n  Configuration Documentation:\n  https://jestjs.io/docs/configuration\n\nPASS unit tests/basic.test.js\n  GoCommander Basic Structure\n    √ should export main classes and functions (29 ms)\n    √ should create a command instance (21 ms)\n    √ should create command with factory function (1 ms)\n    √ should allow method chaining (10 ms)\n    √ program should be a Command instance (1 ms)\n\nFAIL unit tests/argument-processing.test.js\n  Argument Processing\n    Basic Argument Types\n      √ should handle required arguments (51 ms)\n      √ should handle optional arguments (3 ms)\n      √ should handle variadic arguments (3 ms)\n      √ should handle mixed argument types (2 ms)\n    Argument Validation\n      × should validate required arguments (5 ms)\n      √ should validate argument count (191 ms)\n      √ should allow excess arguments when configured (1 ms)\n    Argument Parsing\n      √ should parse arguments with custom parser (6 ms)\n      √ should handle parser errors (4 ms)\n      √ should parse variadic arguments with parser (2 ms)\n    Argument Choices\n      √ should validate argument choices (1 ms)\n      √ should reject invalid choices (2 ms)\n      √ should handle optional argument choices (1 ms)\n    Argument Description and Help\n      × should generate argument help text (7 ms)\n      × should show default values in help (3 ms)\n      × should show choices in help (1 ms)\n    Argument Structure Validation\n      × should prevent required arguments after optional (1 ms)\n      √ should prevent arguments after variadic (3 ms)\n      √ should allow proper argument order (1 ms)\n    Complex Argument Scenarios\n      × should handle command with subcommands and arguments (9 ms)\n      √ should handle arguments with options mixed (10 ms)\n      × should handle positional options when enabled (6 ms)\n    Argument Processing with Actions\n      √ should pass processed arguments to action (6 ms)\n      √ should handle variadic arguments in action (1 ms)\n      √ should handle parsed arguments in action (1 ms)\n    Argument Error Handling\n      × should provide helpful error messages (1 ms)\n      √ should handle custom argument validation errors (2 ms)\n      × should handle argument parsing with exit override (3 ms)\n    Argument Compatibility\n      √ should maintain Commander.js argument API (4 ms)\n      √ should handle argument description with args description (1 ms)\n      √ should support legacy arguments method (2 ms)\n\n  ● Argument Processing › Argument Validation › should validate required arguments\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /missing required argument/i\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 52 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 53 |\u001b[39m         command\u001b[33m.\u001b[39m_parseWithJS([])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 54 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[35m/missing required argument/i\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 55 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 56 |\u001b[39m\n     \u001b[90m 57 |\u001b[39m     test(\u001b[32m'should validate argument count'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toThrow (tests/argument-processing.test.js:54:10)\n\n  ● Argument Processing › Argument Description and Help › should generate argument help text\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"<file>\"\n    Received string:    \"Usage: test [file] [output] [dirs...]·\n    Arguments:\n      [file]     input file\n      [output]   output file\n      [dirs...]  directories to process·\n    Options:\n      -h, --help  display help for command\n    \"\n\n    \u001b[0m \u001b[90m 164 |\u001b[39m       \n     \u001b[90m 165 |\u001b[39m       \u001b[36mconst\u001b[39m helpInfo \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39mhelpInformation()\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 166 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'<file>'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 167 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'[output]'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 168 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'<dirs...>'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 169 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'input file'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toContain (tests/argument-processing.test.js:166:24)\n\n  ● Argument Processing › Argument Description and Help › should show default values in help\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"default.txt\"\n    Received string:    \"Usage: test [output]·\n    Arguments:\n      [output]  output file·\n    Options:\n      -h, --help  display help for command\n    \"\n\n    \u001b[0m \u001b[90m 176 |\u001b[39m       \n     \u001b[90m 177 |\u001b[39m       \u001b[36mconst\u001b[39m helpInfo \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39mhelpInformation()\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 178 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'default.txt'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 179 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 180 |\u001b[39m\n     \u001b[90m 181 |\u001b[39m     test(\u001b[32m'should show choices in help'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toContain (tests/argument-processing.test.js:178:24)\n\n  ● Argument Processing › Argument Description and Help › should show choices in help\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"debug\"\n    Received string:    \"Usage: test <level>·\n    Arguments:\n      <level>  log level·\n    Options:\n      -h, --help  display help for command\n    \"\n\n    \u001b[0m \u001b[90m 185 |\u001b[39m       \n     \u001b[90m 186 |\u001b[39m       \u001b[36mconst\u001b[39m helpInfo \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39mhelpInformation()\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 187 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'debug'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 188 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'info'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 189 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'warn'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 190 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toContain (tests/argument-processing.test.js:187:24)\n\n  ● Argument Processing › Argument Structure Validation › should prevent required arguments after optional\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /required.*optional/i\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 197 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 198 |\u001b[39m         command\u001b[33m.\u001b[39margument(\u001b[32m'<required>'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'required argument'\u001b[39m)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 199 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[35m/required.*optional/i\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 200 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 201 |\u001b[39m\n     \u001b[90m 202 |\u001b[39m     test(\u001b[32m'should prevent arguments after variadic'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toThrow (tests/argument-processing.test.js:199:10)\n\n  ● Argument Processing › Complex Argument Scenarios › should handle command with subcommands and arguments\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 0\n    + Received  + 1\n\n      Array [\n        \"deploy\",\n    +   \"dist\",\n      ]\n\n    \u001b[0m \u001b[90m 228 |\u001b[39m       \u001b[90m// Test main command\u001b[39m\n     \u001b[90m 229 |\u001b[39m       \u001b[36mlet\u001b[39m result \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'deploy'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 230 |\u001b[39m       expect(result\u001b[33m.\u001b[39marguments)\u001b[33m.\u001b[39mtoEqual([\u001b[32m'deploy'\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 231 |\u001b[39m       \n     \u001b[90m 232 |\u001b[39m       \u001b[90m// Test subcommand (would be handled by subcommand parsing)\u001b[39m\n     \u001b[90m 233 |\u001b[39m       result \u001b[33m=\u001b[39m buildCmd\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'src/main.js'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'output'\u001b[39m])\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (tests/argument-processing.test.js:230:32)\n\n  ● Argument Processing › Complex Argument Scenarios › should handle positional options when enabled\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"json\"\n    Received: \"data.txt\"\n\n    \u001b[0m \u001b[90m 253 |\u001b[39m       \n     \u001b[90m 254 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'json'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'data.txt'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 255 |\u001b[39m       expect(result\u001b[33m.\u001b[39moptions\u001b[33m.\u001b[39mformat)\u001b[33m.\u001b[39mtoBe(\u001b[32m'json'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 256 |\u001b[39m       expect(result\u001b[33m.\u001b[39marguments)\u001b[33m.\u001b[39mtoEqual([\u001b[32m'data.txt'\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m 257 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 258 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toBe (tests/argument-processing.test.js:255:37)\n\n  ● Argument Processing › Argument Error Handling › should provide helpful error messages\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /missing required argument.*count/i\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 308 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 309 |\u001b[39m         command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'file.txt'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 310 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[35m/missing required argument.*count/i\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 311 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 312 |\u001b[39m\n     \u001b[90m 313 |\u001b[39m     test(\u001b[32m'should handle custom argument validation errors'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toThrow (tests/argument-processing.test.js:310:10)\n\n  ● Argument Processing › Argument Error Handling › should handle argument parsing with exit override\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: ObjectContaining {\"code\": StringContaining \"missing\"}\n\n    Number of calls: 0\n\n    \u001b[0m \u001b[90m 333 |\u001b[39m       command\u001b[33m.\u001b[39m_parseWithJS([])\u001b[33m;\u001b[39m\n     \u001b[90m 334 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 335 |\u001b[39m       expect(exitHandler)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\n     \u001b[90m     |\u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 336 |\u001b[39m         expect\u001b[33m.\u001b[39mobjectContaining({\n     \u001b[90m 337 |\u001b[39m           code\u001b[33m:\u001b[39m expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'missing'\u001b[39m)\n     \u001b[90m 338 |\u001b[39m         })\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/argument-processing.test.js:335:27)\n\nFAIL unit tests/subcommand-handling.test.js\n  ● Test suite failed to run\n\n    TypeError: Converting circular structure to JSON\n        --> starting at object with constructor 'Command'\n        |     property 'parent' -> object with constructor 'Command'\n        |     property 'commands' -> object with constructor 'Array'\n        --- index 0 closes the circle\n        at stringify (<anonymous>)\n\n      at messageParent (node_modules/jest-worker/build/workers/messageParent.js:29:19)\n\nFAIL unit tests/command-api.test.js\n  ● Test suite failed to run\n\n    TypeError: Converting circular structure to JSON\n        --> starting at object with constructor 'Command'\n        |     property 'commands' -> object with constructor 'Array'\n        |     index 0 -> object with constructor 'Command'\n        --- property 'parent' closes the circle\n        at stringify (<anonymous>)\n\n      at messageParent (node_modules/jest-worker/build/workers/messageParent.js:29:19)\n\n(node:20196) [DEP0111] DeprecationWarning: Access to process.binding('async_wrap') is deprecated.\n(Use `node --trace-deprecation ...` to show where the warning was created)\nFAIL unit tests/error-handling.test.js\n  Error Handling and Edge Cases\n    CommanderError Class\n      √ should create CommanderError with message only (58 ms)\n      √ should create CommanderError with all parameters (2 ms)\n      √ should maintain stack trace (67 ms)\n    InvalidArgumentError Class\n      √ should create InvalidArgumentError (2 ms)\n      √ should inherit from CommanderError (2 ms)\n    InvalidOptionArgumentError Class\n      √ should create InvalidOptionArgumentError (2 ms)\n    Missing Required Options\n      √ should handle missing required option (174 ms)\n      × should show help after error when configured (10 ms)\n      × should show custom help message after error (8 ms)\n    Unknown Options\n      × should handle unknown option (3 ms)\n      × should allow unknown options when configured (6 ms)\n      × should pass through unknown options when configured (1 ms)\n      √ should use custom unknown option handler (3 ms)\n    Missing Option Arguments\n      √ should handle missing option argument (3 ms)\n      × should handle missing option argument with custom message (3 ms)\n    Invalid Option Values\n      √ should handle invalid option parser (4 ms)\n      × should handle choice validation errors (1 ms)\n      √ should handle custom option validation (3 ms)\n    Missing Required Arguments\n      × should handle missing required argument (2 ms)\n      × should validate required arguments during parsing (2 ms)\n    Excess Arguments\n      √ should handle excess arguments (4 ms)\n      √ should allow excess arguments when configured (2 ms)\n      √ should use custom excess argument handler (2 ms)\n    Unknown Commands\n      × should handle unknown command (4 ms)\n      × should show suggestions for unknown commands (2 ms)\n      √ should use custom suggestion generator (2 ms)\n    Conflicting Options\n      × should handle conflicting options (133 ms)\n      × should detect option conflicts during validation (42 ms)\n    Exit Override\n      √ should use exit override for errors (3 ms)\n      × should use default exit override (37 ms)\n      √ should handle async command errors with exit override (1 ms)\n    Error Display Configuration\n      √ should configure error output (1 ms)\n      √ should write error output using configured writer (2 ms)\n      √ should write output using configured writer (1 ms)\n    Parsing Edge Cases\n      √ should handle empty argument array (3 ms)\n      × should handle double dash separator (4 ms)\n      √ should handle combined short options (2 ms)\n      √ should handle option with equals sign (1 ms)\n      √ should handle negated boolean options (2 ms)\n    Environment Variable Errors\n      √ should handle invalid environment variable values (3 ms)\n      × should handle missing required environment variables (2 ms)\n    Action Execution Errors\n      √ should handle action execution errors (2 ms)\n      √ should handle async action errors (4 ms)\n      √ should execute post-action hooks even when action fails (3 ms)\n    Hook Execution Errors\n      √ should handle hook execution errors (2 ms)\n      √ should handle async hook errors (1 ms)\n    WASM Integration Error Handling\n      √ should handle WASM loading failures gracefully (1 ms)\n      × should handle WASM operation failures (2 ms)\n    Complex Error Scenarios\n      √ should handle multiple validation errors (3 ms)\n      √ should handle nested command errors (5 ms)\n      √ should handle option group validation errors (3 ms)\n\n  ● Error Handling and Edge Cases › Missing Required Options › should show help after error when configured\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"required option\"\n    Received\n           1: \"error: required option '-f, --file <path>' not specified\n    \", \"utf8\"\n           2: \"\n    \", \"utf8\"\n           3: \"Usage: test [options]·\n    Options:\n      -f, --file <path>  input file\n      -h, --help         display help for command\n    \", \"utf8\"\n\n    Number of calls: 3\n\n    \u001b[0m \u001b[90m 85 |\u001b[39m       command\u001b[33m.\u001b[39mmissingMandatoryOptionValue(command\u001b[33m.\u001b[39moptions[\u001b[35m0\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m 86 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 87 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'required option'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 88 |\u001b[39m       expect(exitSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 89 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 90 |\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:87:25)\n\n  ● Error Handling and Edge Cases › Missing Required Options › should show custom help message after error\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"Use --help for usage\"\n    Received\n           1: \"error: required option '-f, --file <path>' not specified\n    \", \"utf8\"\n           2: \"Use --help for usage information\n    \", \"utf8\"\n\n    Number of calls: 2\n\n    \u001b[0m \u001b[90m  95 |\u001b[39m       command\u001b[33m.\u001b[39mmissingMandatoryOptionValue(command\u001b[33m.\u001b[39moptions[\u001b[35m0\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m  96 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  97 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'Use --help for usage'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m  98 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m  99 |\u001b[39m   })\u001b[33m;\u001b[39m\n     \u001b[90m 100 |\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:97:25)\n\n  ● Error Handling and Edge Cases › Unknown Options › should handle unknown option\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"unknown option\"\n    Received: \"error: unknown option '--invalid'\n    \", \"utf8\"\n\n    Number of calls: 1\n\n    \u001b[0m \u001b[90m 103 |\u001b[39m       command\u001b[33m.\u001b[39munknownOption(\u001b[32m'--invalid'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 104 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 105 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'unknown option'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 106 |\u001b[39m       expect(exitSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 107 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 108 |\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:105:25)\n\n  ● Error Handling and Edge Cases › Unknown Options › should allow unknown options when configured\n\n    CommanderError: error: too many arguments. Expected 0 arguments but got 2.\n\n    \u001b[0m \u001b[90m 2494 |\u001b[39m                     \u001b[36mconst\u001b[39m s \u001b[33m=\u001b[39m expected \u001b[33m===\u001b[39m \u001b[35m1\u001b[39m \u001b[33m?\u001b[39m \u001b[32m''\u001b[39m \u001b[33m:\u001b[39m \u001b[32m's'\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 2495 |\u001b[39m                     \u001b[36mconst\u001b[39m forSubcommand \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mparent \u001b[33m?\u001b[39m \u001b[32m` for '${this.name()}'`\u001b[39m \u001b[33m:\u001b[39m \u001b[32m''\u001b[39m\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2496 |\u001b[39m                     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${args.length}.`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2497 |\u001b[39m                 }\n     \u001b[90m 2498 |\u001b[39m             }\n     \u001b[90m 2499 |\u001b[39m\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2496:27)\n      at Object._parseWithJS (tests/error-handling.test.js:112:30)\n\n  ● Error Handling and Edge Cases › Unknown Options › should pass through unknown options when configured\n\n    CommanderError: error: too many arguments. Expected 0 arguments but got 3.\n\n    \u001b[0m \u001b[90m 2494 |\u001b[39m                     \u001b[36mconst\u001b[39m s \u001b[33m=\u001b[39m expected \u001b[33m===\u001b[39m \u001b[35m1\u001b[39m \u001b[33m?\u001b[39m \u001b[32m''\u001b[39m \u001b[33m:\u001b[39m \u001b[32m's'\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 2495 |\u001b[39m                     \u001b[36mconst\u001b[39m forSubcommand \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mparent \u001b[33m?\u001b[39m \u001b[32m` for '${this.name()}'`\u001b[39m \u001b[33m:\u001b[39m \u001b[32m''\u001b[39m\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2496 |\u001b[39m                     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${args.length}.`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2497 |\u001b[39m                 }\n     \u001b[90m 2498 |\u001b[39m             }\n     \u001b[90m 2499 |\u001b[39m\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2496:27)\n      at Object._parseWithJS (tests/error-handling.test.js:120:30)\n\n  ● Error Handling and Edge Cases › Missing Option Arguments › should handle missing option argument with custom message\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"argument missing\"\n    Received: \"error: option '-f, --file <path>' argument missing\n    \", \"utf8\"\n\n    Number of calls: 1\n\n    \u001b[0m \u001b[90m 149 |\u001b[39m       command\u001b[33m.\u001b[39moptionMissingArgument(option)\u001b[33m;\u001b[39m\n     \u001b[90m 150 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 151 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'argument missing'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 152 |\u001b[39m       expect(exitSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 153 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 154 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:151:25)\n\n  ● Error Handling and Edge Cases › Invalid Option Values › should handle choice validation errors\n\n    TypeError: option.choices is not a function\n\n    \u001b[0m \u001b[90m 173 |\u001b[39m     test(\u001b[32m'should handle choice validation errors'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 174 |\u001b[39m       \u001b[36mconst\u001b[39m option \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39mcreateOption(\u001b[32m'-l, --level <level>'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'log level'\u001b[39m)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 175 |\u001b[39m       option\u001b[33m.\u001b[39mchoices([\u001b[32m'debug'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'info'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'warn'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'error'\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 176 |\u001b[39m       command\u001b[33m.\u001b[39maddOption(option)\u001b[33m;\u001b[39m\n     \u001b[90m 177 |\u001b[39m       \n     \u001b[90m 178 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.choices (tests/error-handling.test.js:175:14)\n\n  ● Error Handling and Edge Cases › Missing Required Arguments › should handle missing required argument\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"missing required argument\"\n    Received: \"error: missing required argument 'file'\n    \", \"utf8\"\n\n    Number of calls: 1\n\n    \u001b[0m \u001b[90m 203 |\u001b[39m       command\u001b[33m.\u001b[39mmissingArgument(\u001b[32m'file'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 204 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 205 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'missing required argument'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 206 |\u001b[39m       expect(exitSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 207 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:205:25)\n\n  ● Error Handling and Edge Cases › Missing Required Arguments › should validate required arguments during parsing\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /missing required argument/i\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 213 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 214 |\u001b[39m         command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'source.txt'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 215 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[35m/missing required argument/i\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 216 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 217 |\u001b[39m   })\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m\u001b[0m\n\n      at Object.toThrow (tests/error-handling.test.js:215:10)\n\n  ● Error Handling and Edge Cases › Unknown Commands › should handle unknown command\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"unknown command\"\n    Received: \"error: unknown command 'unknown'\n    Available commands: build\n    \", \"utf8\"\n\n    Number of calls: 1\n\n    \u001b[0m \u001b[90m 252 |\u001b[39m       command\u001b[33m.\u001b[39munknownCommand()\u001b[33m;\u001b[39m\n     \u001b[90m 253 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 254 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'unknown command'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 255 |\u001b[39m       expect(exitSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 256 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 257 |\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:254:25)\n\n  ● Error Handling and Edge Cases › Unknown Commands › should show suggestions for unknown commands\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"build\"\n    Received: \"error: unknown command 'buil'\n    Did you mean 'build'?\n    \", \"utf8\"\n\n    Number of calls: 1\n\n    \u001b[0m \u001b[90m 263 |\u001b[39m       command\u001b[33m.\u001b[39munknownCommand()\u001b[33m;\u001b[39m\n     \u001b[90m 264 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 265 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'build'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 266 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 267 |\u001b[39m\n     \u001b[90m 268 |\u001b[39m     test(\u001b[32m'should use custom suggestion generator'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:265:25)\n\n  ● Error Handling and Edge Cases › Conflicting Options › should handle conflicting options\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /cannot be used with/i\n    Received message: \"Conflicting options: -v, --verbose and -q, --quiet\"\n\n        \u001b[0m \u001b[90m 2518 |\u001b[39m                 \u001b[36mthrow\u001b[39m error\u001b[33m;\u001b[39m\n         \u001b[90m 2519 |\u001b[39m             }\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2520 |\u001b[39m             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(error\u001b[33m.\u001b[39mmessage)\u001b[33m;\u001b[39m\n         \u001b[90m      |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 2521 |\u001b[39m         }\n         \u001b[90m 2522 |\u001b[39m     }\n         \u001b[90m 2523 |\u001b[39m\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2520:19)\n      at _parseWithJS (tests/error-handling.test.js:286:17)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/error-handling.test.js:287:10)\n      at Object.toThrow (tests/error-handling.test.js:287:10)\n\n  ● Error Handling and Edge Cases › Conflicting Options › should detect option conflicts during validation\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /cannot be used with/i\n    Received message: \"Conflicting options: -v, --verbose and -q, --quiet\"\n\n        \u001b[0m \u001b[90m 2990 |\u001b[39m                         \n         \u001b[90m 2991 |\u001b[39m                         \u001b[36mif\u001b[39m (conflictIsSet) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2992 |\u001b[39m                             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`Conflicting options: ${option.flags} and ${conflictOption.flags}`\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m      |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 2993 |\u001b[39m                         }\n         \u001b[90m 2994 |\u001b[39m                     }\n         \u001b[90m 2995 |\u001b[39m                 }\u001b[0m\n\n      at Command._validateOptionConstraints (src/command.js:2992:35)\n      at _validateOptionConstraints (tests/error-handling.test.js:304:17)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/error-handling.test.js:305:10)\n      at Object.toThrow (tests/error-handling.test.js:305:10)\n\n  ● Error Handling and Edge Cases › Exit Override › should use default exit override\n\n    expect(received).toThrow(expected)\n\n    Expected constructor: CommanderError\n    Received constructor: CommanderError\n\n    Received message: \"Test error\"\n\n        \u001b[0m \u001b[90m 2725 |\u001b[39m     _exit(exitCode\u001b[33m,\u001b[39m code\u001b[33m,\u001b[39m message) {\n         \u001b[90m 2726 |\u001b[39m         \u001b[36mif\u001b[39m (\u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m_exitCallback) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2727 |\u001b[39m             \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m_exitCallback(\u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(exitCode\u001b[33m,\u001b[39m code\u001b[33m,\u001b[39m message))\u001b[33m;\u001b[39m\n         \u001b[90m      |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 2728 |\u001b[39m             \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n         \u001b[90m 2729 |\u001b[39m         }\n         \u001b[90m 2730 |\u001b[39m         process\u001b[33m.\u001b[39mexit(exitCode)\u001b[33m;\u001b[39m\u001b[0m\n\n      at Command._exit (src/command.js:2727:32)\n      at Command._exit (src/command.js:2722:14)\n      at error (tests/error-handling.test.js:329:17)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/error-handling.test.js:330:10)\n      at Object.toThrow (tests/error-handling.test.js:330:10)\n\n  ● Error Handling and Edge Cases › Parsing Edge Cases › should handle double dash separator\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected value: \"--not-an-option\"\n    Received array: [[\"--not-an-option\", \"file.txt\"]]\n\n    \u001b[0m \u001b[90m 389 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'-v'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'--'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'--not-an-option'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'file.txt'\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m 390 |\u001b[39m       expect(result\u001b[33m.\u001b[39moptions\u001b[33m.\u001b[39mverbose)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 391 |\u001b[39m       expect(result\u001b[33m.\u001b[39marguments)\u001b[33m.\u001b[39mtoContain(\u001b[32m'--not-an-option'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 392 |\u001b[39m       expect(result\u001b[33m.\u001b[39marguments)\u001b[33m.\u001b[39mtoContain(\u001b[32m'file.txt'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 393 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 394 |\u001b[39m\u001b[0m\n\n      at Object.toContain (tests/error-handling.test.js:391:32)\n\n  ● Error Handling and Edge Cases › Environment Variable Errors › should handle missing required environment variables\n\n    CommanderError: Environment variable error: Required environment variable MISSING_KEY is not set\n\n    \u001b[0m \u001b[90m 4216 |\u001b[39m         } \u001b[36mcatch\u001b[39m (error) {\n     \u001b[90m 4217 |\u001b[39m             \u001b[36mif\u001b[39m (options\u001b[33m.\u001b[39mrequired) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 4218 |\u001b[39m                 \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`Environment variable error: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 4219 |\u001b[39m             }\n     \u001b[90m 4220 |\u001b[39m             \u001b[90m// If not required, continue with default value\u001b[39m\n     \u001b[90m 4221 |\u001b[39m             \u001b[36mif\u001b[39m (options\u001b[33m.\u001b[39mdefaultValue \u001b[33m!==\u001b[39m undefined) {\u001b[0m\n\n      at Command.envOption (src/command.js:4218:23)\n      at Object.envOption (tests/error-handling.test.js:447:15)\n\n  ● Error Handling and Edge Cases › WASM Integration Error Handling › should handle WASM operation failures\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n    \u001b[0m \u001b[90m 542 |\u001b[39m       \n     \u001b[90m 543 |\u001b[39m       \u001b[90m// Should not throw, should log warning\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 544 |\u001b[39m       expect(consoleSpy)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 545 |\u001b[39m       \n     \u001b[90m 546 |\u001b[39m       consoleSpy\u001b[33m.\u001b[39mmockRestore()\u001b[33m;\u001b[39m\n     \u001b[90m 547 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalled (tests/error-handling.test.js:544:26)\n\nFAIL unit tests/option-processing.test.js\n  Option Processing System\n    Boolean Options\n      √ should handle basic boolean options (80 ms)\n      √ should handle short boolean flags (2 ms)\n      √ should use default value when not provided (6 ms)\n    Negatable Options\n      √ should handle negatable options (6 ms)\n      √ should recognize negated flags (6 ms)\n    Value Options\n      √ should handle options with required values (6 ms)\n      √ should handle options with optional values (2 ms)\n      √ should throw error when required value is missing (161 ms)\n    Variadic Options\n      √ should handle variadic options (5 ms)\n      √ should initialize variadic options with empty array (2 ms)\n    Choice Options\n      √ should handle options with predefined choices (2 ms)\n      × should throw error for invalid choices (350 ms)\n    Custom Option Parsers\n      √ should handle custom integer parser (1 ms)\n      √ should handle custom float parser (1 ms)\n      × should handle custom list parser (1 ms)\n      × should handle custom JSON parser (1 ms)\n      √ should throw error for invalid custom parser input (2 ms)\n    Environment Variable Options\n      √ should read from environment variables (4 ms)\n      √ should prefer command line over environment (1 ms)\n    Required Options\n      √ should validate required options (2 ms)\n      √ should pass validation when required option is provided (1 ms)\n    Option Groups\n      √ should handle mutually exclusive options (3 ms)\n      √ should handle required option groups (2 ms)\n    Option Conflicts and Implications\n      × should handle conflicting options (68 ms)\n      × should handle option implications (1 ms)\n    OptionProcessor\n      √ should process boolean options (1 ms)\n      √ should process value options (1 ms)\n      √ should process variadic options (1 ms)\n      √ should validate all options (11 ms)\n    Built-in Parsers\n      √ should parse integers correctly (6 ms)\n      √ should parse floats correctly (2 ms)\n      √ should parse booleans correctly (2 ms)\n      √ should parse lists correctly (1 ms)\n      √ should parse JSON correctly (2 ms)\n    Enhanced Option Processing Integration\n      √ should handle environment variable precedence correctly (2 ms)\n      × should handle option preprocessing and postprocessing (7 ms)\n      × should handle advanced option validation (1 ms)\n      √ should handle complex option groups with mixed constraints (5 ms)\n      × should handle variadic options with custom parsers (8 ms)\n      √ should handle option implications correctly (1 ms)\n      × should handle conflicting options correctly (38 ms)\n      √ should handle validated options with custom validation (5 ms)\n\n  ● Option Processing System › Choice Options › should throw error for invalid choices\n\n    expect(received).toThrow(expected)\n\n    Expected substring: \"Invalid choice for option -l, --level <level>. Expected one of: debug, info, warn, error\"\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 118 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 119 |\u001b[39m         command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'--level'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'invalid'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 120 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[32m'Invalid choice for option -l, --level <level>. Expected one of: debug, info, warn, error'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 121 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 122 |\u001b[39m   })\u001b[33m;\u001b[39m\n     \u001b[90m 123 |\u001b[39m\u001b[0m\n\n      at Object.toThrow (tests/option-processing.test.js:120:10)\n\n  ● Option Processing System › Custom Option Parsers › should handle custom list parser\n\n    CommanderError: Error processing option tags: value.split is not a function\n\n    \u001b[0m \u001b[90m 2868 |\u001b[39m             }\n     \u001b[90m 2869 |\u001b[39m         } \u001b[36mcatch\u001b[39m (error) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2870 |\u001b[39m             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`Error processing option ${flagName}: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2871 |\u001b[39m         }\n     \u001b[90m 2872 |\u001b[39m     }\n     \u001b[90m 2873 |\u001b[39m\u001b[0m\n\n      at Command._processOptionWithEnhancements (src/command.js:2870:19)\n      at Command._processOptionWithEnhancements [as _parseWithJS] (src/command.js:2398:42)\n      at Object._parseWithJS (tests/option-processing.test.js:142:30)\n\n  ● Option Processing System › Custom Option Parsers › should handle custom JSON parser\n\n    CommanderError: Error processing option config: Invalid JSON: \"[object Object]\" is not valid JSON\n\n    \u001b[0m \u001b[90m 2868 |\u001b[39m             }\n     \u001b[90m 2869 |\u001b[39m         } \u001b[36mcatch\u001b[39m (error) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2870 |\u001b[39m             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`Error processing option ${flagName}: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2871 |\u001b[39m         }\n     \u001b[90m 2872 |\u001b[39m     }\n     \u001b[90m 2873 |\u001b[39m\u001b[0m\n\n      at Command._processOptionWithEnhancements (src/command.js:2870:19)\n      at Command._processOptionWithEnhancements [as _parseWithJS] (src/command.js:2398:42)\n      at Object._parseWithJS (tests/option-processing.test.js:149:30)\n\n  ● Option Processing System › Option Conflicts and Implications › should handle conflicting options\n\n    expect(received).toThrow(expected)\n\n    Expected substring: \"Conflicting options: -v, --verbose and -q, --quiet\"\n    Received message:   \"error: unknown option '--verbose'\"\n\n        \u001b[0m \u001b[90m 2450 |\u001b[39m                         \n         \u001b[90m 2451 |\u001b[39m                         \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mhandled) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2452 |\u001b[39m                             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`error: unknown option '${arg}'`\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m      |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 2453 |\u001b[39m                         }\n         \u001b[90m 2454 |\u001b[39m                     }\n         \u001b[90m 2455 |\u001b[39m                 } \u001b[36melse\u001b[39m {\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2452:35)\n      at _parseWithJS (tests/option-processing.test.js:245:17)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/option-processing.test.js:246:10)\n      at Object.toThrow (tests/option-processing.test.js:246:10)\n\n  ● Option Processing System › Option Conflicts and Implications › should handle option implications\n\n    CommanderError: error: unknown option '--verbose'\n\n    \u001b[0m \u001b[90m 2450 |\u001b[39m                         \n     \u001b[90m 2451 |\u001b[39m                         \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mhandled) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2452 |\u001b[39m                             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`error: unknown option '${arg}'`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2453 |\u001b[39m                         }\n     \u001b[90m 2454 |\u001b[39m                     }\n     \u001b[90m 2455 |\u001b[39m                 } \u001b[36melse\u001b[39m {\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2452:35)\n      at Object._parseWithJS (tests/option-processing.test.js:260:30)\n\n  ● Option Processing System › Enhanced Option Processing Integration › should handle option preprocessing and postprocessing\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"processed-TEST\"\n    Received: \"test\"\n\n    \u001b[0m \u001b[90m 374 |\u001b[39m       \n     \u001b[90m 375 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'--number'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'test'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 376 |\u001b[39m       expect(result\u001b[33m.\u001b[39moptions\u001b[33m.\u001b[39mnumber)\u001b[33m.\u001b[39mtoBe(\u001b[32m'processed-TEST'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 377 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 378 |\u001b[39m\n     \u001b[90m 379 |\u001b[39m     test(\u001b[32m'should handle advanced option validation'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toBe (tests/option-processing.test.js:376:37)\n\n  ● Option Processing System › Enhanced Option Processing Integration › should handle advanced option validation\n\n    expect(received).toThrow(expected)\n\n    Expected substring: \"Custom validation failed: Port must be >= 1024\"\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 390 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 391 |\u001b[39m         command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'--port'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'80'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 392 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[32m'Custom validation failed: Port must be >= 1024'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 393 |\u001b[39m       \n     \u001b[90m 394 |\u001b[39m       \u001b[90m// Should pass with valid port\u001b[39m\n     \u001b[90m 395 |\u001b[39m       command\u001b[33m.\u001b[39m_optionProcessor \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mOptionProcessor\u001b[39m()\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toThrow (tests/option-processing.test.js:392:10)\n\n  ● Option Processing System › Enhanced Option Processing Integration › should handle variadic options with custom parsers\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 3\n\n      Array [\n    -   1,\n    -   2,\n    -   3,\n    +   \"1\",\n    +   \"2\",\n    +   \"3\",\n      ]\n\n    \u001b[0m \u001b[90m 455 |\u001b[39m       \n     \u001b[90m 456 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'--numbers'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'1'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'--numbers'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'2'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'--numbers'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'3'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 457 |\u001b[39m       expect(result\u001b[33m.\u001b[39moptions\u001b[33m.\u001b[39mnumbers)\u001b[33m.\u001b[39mtoEqual([\u001b[35m1\u001b[39m\u001b[33m,\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m \u001b[35m3\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 458 |\u001b[39m       \n     \u001b[90m 459 |\u001b[39m       \u001b[90m// Should validate individual values\u001b[39m\n     \u001b[90m 460 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toEqual (tests/option-processing.test.js:457:38)\n\n  ● Option Processing System › Enhanced Option Processing Integration › should handle conflicting options correctly\n\n    expect(received).toThrow(expected)\n\n    Expected substring: \"Option -v, --verbose cannot be used with option -q, --quiet\"\n    Received message:   \"Conflicting options: -v, --verbose and -q, --quiet\"\n\n        \u001b[0m \u001b[90m 2518 |\u001b[39m                 \u001b[36mthrow\u001b[39m error\u001b[33m;\u001b[39m\n         \u001b[90m 2519 |\u001b[39m             }\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2520 |\u001b[39m             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(error\u001b[33m.\u001b[39mmessage)\u001b[33m;\u001b[39m\n         \u001b[90m      |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 2521 |\u001b[39m         }\n         \u001b[90m 2522 |\u001b[39m     }\n         \u001b[90m 2523 |\u001b[39m\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2520:19)\n      at _parseWithJS (tests/option-processing.test.js:479:17)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/option-processing.test.js:480:10)\n      at Object.toThrow (tests/option-processing.test.js:480:10)\n\nTest Suites: 5 failed, 1 passed, 6 total\nTests:       35 failed, 94 passed, 129 total\nSnapshots:   0 total\nTime:        4.501 s, estimated 7 s\nRan all test suites.\n"
      }
    },
    "wasmLoading": {
      "passed": false,
      "details": {
        "binaryExists": true,
        "binarySize": 702584,
        "nodeJsLoading": false
      }
    },
    "packageInstallation": {
      "passed": true,
      "details": {
        "packageJsonValid": true,
        "buildFilesExist": true,
        "basicUsageWorks": true
      }
    },
    "performanceBenchmarks": {
      "passed": true,
      "details": {
        "commandCreation": {
          "time": 6.7254000000000005,
          "avgPerCommand": 0.0067254,
          "requirement": "< 50ms average per command",
          "passed": true
        },
        "optionParsing": {
          "time": 9.0456,
          "avgPerParse": 0.09045600000000001,
          "requirement": "< 10ms average per parse",
          "passed": true
        }
      }
    }
  },
  "errors": [
    "Test suite validation failed: Command failed: npm test\n● Validation Warning:\n\n  Unknown option \"testTimeout\" with value 10000 was found.\n  This is probably a typing mistake. Fixing it will remove this message.\n\n  Configuration Documentation:\n  https://jestjs.io/docs/configuration\n\n● Validation Warning:\n\n  Unknown option \"testTimeout\" with value 60000 was found.\n  This is probably a typing mistake. Fixing it will remove this message.\n\n  Configuration Documentation:\n  https://jestjs.io/docs/configuration\n\nPASS unit tests/basic.test.js\n  GoCommander Basic Structure\n    √ should export main classes and functions (29 ms)\n    √ should create a command instance (21 ms)\n    √ should create command with factory function (1 ms)\n    √ should allow method chaining (10 ms)\n    √ program should be a Command instance (1 ms)\n\nFAIL unit tests/argument-processing.test.js\n  Argument Processing\n    Basic Argument Types\n      √ should handle required arguments (51 ms)\n      √ should handle optional arguments (3 ms)\n      √ should handle variadic arguments (3 ms)\n      √ should handle mixed argument types (2 ms)\n    Argument Validation\n      × should validate required arguments (5 ms)\n      √ should validate argument count (191 ms)\n      √ should allow excess arguments when configured (1 ms)\n    Argument Parsing\n      √ should parse arguments with custom parser (6 ms)\n      √ should handle parser errors (4 ms)\n      √ should parse variadic arguments with parser (2 ms)\n    Argument Choices\n      √ should validate argument choices (1 ms)\n      √ should reject invalid choices (2 ms)\n      √ should handle optional argument choices (1 ms)\n    Argument Description and Help\n      × should generate argument help text (7 ms)\n      × should show default values in help (3 ms)\n      × should show choices in help (1 ms)\n    Argument Structure Validation\n      × should prevent required arguments after optional (1 ms)\n      √ should prevent arguments after variadic (3 ms)\n      √ should allow proper argument order (1 ms)\n    Complex Argument Scenarios\n      × should handle command with subcommands and arguments (9 ms)\n      √ should handle arguments with options mixed (10 ms)\n      × should handle positional options when enabled (6 ms)\n    Argument Processing with Actions\n      √ should pass processed arguments to action (6 ms)\n      √ should handle variadic arguments in action (1 ms)\n      √ should handle parsed arguments in action (1 ms)\n    Argument Error Handling\n      × should provide helpful error messages (1 ms)\n      √ should handle custom argument validation errors (2 ms)\n      × should handle argument parsing with exit override (3 ms)\n    Argument Compatibility\n      √ should maintain Commander.js argument API (4 ms)\n      √ should handle argument description with args description (1 ms)\n      √ should support legacy arguments method (2 ms)\n\n  ● Argument Processing › Argument Validation › should validate required arguments\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /missing required argument/i\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 52 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 53 |\u001b[39m         command\u001b[33m.\u001b[39m_parseWithJS([])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 54 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[35m/missing required argument/i\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 55 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 56 |\u001b[39m\n     \u001b[90m 57 |\u001b[39m     test(\u001b[32m'should validate argument count'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toThrow (tests/argument-processing.test.js:54:10)\n\n  ● Argument Processing › Argument Description and Help › should generate argument help text\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"<file>\"\n    Received string:    \"Usage: test [file] [output] [dirs...]·\n    Arguments:\n      [file]     input file\n      [output]   output file\n      [dirs...]  directories to process·\n    Options:\n      -h, --help  display help for command\n    \"\n\n    \u001b[0m \u001b[90m 164 |\u001b[39m       \n     \u001b[90m 165 |\u001b[39m       \u001b[36mconst\u001b[39m helpInfo \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39mhelpInformation()\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 166 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'<file>'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 167 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'[output]'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 168 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'<dirs...>'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 169 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'input file'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toContain (tests/argument-processing.test.js:166:24)\n\n  ● Argument Processing › Argument Description and Help › should show default values in help\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"default.txt\"\n    Received string:    \"Usage: test [output]·\n    Arguments:\n      [output]  output file·\n    Options:\n      -h, --help  display help for command\n    \"\n\n    \u001b[0m \u001b[90m 176 |\u001b[39m       \n     \u001b[90m 177 |\u001b[39m       \u001b[36mconst\u001b[39m helpInfo \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39mhelpInformation()\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 178 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'default.txt'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 179 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 180 |\u001b[39m\n     \u001b[90m 181 |\u001b[39m     test(\u001b[32m'should show choices in help'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toContain (tests/argument-processing.test.js:178:24)\n\n  ● Argument Processing › Argument Description and Help › should show choices in help\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"debug\"\n    Received string:    \"Usage: test <level>·\n    Arguments:\n      <level>  log level·\n    Options:\n      -h, --help  display help for command\n    \"\n\n    \u001b[0m \u001b[90m 185 |\u001b[39m       \n     \u001b[90m 186 |\u001b[39m       \u001b[36mconst\u001b[39m helpInfo \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39mhelpInformation()\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 187 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'debug'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 188 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'info'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 189 |\u001b[39m       expect(helpInfo)\u001b[33m.\u001b[39mtoContain(\u001b[32m'warn'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 190 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toContain (tests/argument-processing.test.js:187:24)\n\n  ● Argument Processing › Argument Structure Validation › should prevent required arguments after optional\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /required.*optional/i\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 197 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 198 |\u001b[39m         command\u001b[33m.\u001b[39margument(\u001b[32m'<required>'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'required argument'\u001b[39m)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 199 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[35m/required.*optional/i\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 200 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 201 |\u001b[39m\n     \u001b[90m 202 |\u001b[39m     test(\u001b[32m'should prevent arguments after variadic'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toThrow (tests/argument-processing.test.js:199:10)\n\n  ● Argument Processing › Complex Argument Scenarios › should handle command with subcommands and arguments\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 0\n    + Received  + 1\n\n      Array [\n        \"deploy\",\n    +   \"dist\",\n      ]\n\n    \u001b[0m \u001b[90m 228 |\u001b[39m       \u001b[90m// Test main command\u001b[39m\n     \u001b[90m 229 |\u001b[39m       \u001b[36mlet\u001b[39m result \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'deploy'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 230 |\u001b[39m       expect(result\u001b[33m.\u001b[39marguments)\u001b[33m.\u001b[39mtoEqual([\u001b[32m'deploy'\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 231 |\u001b[39m       \n     \u001b[90m 232 |\u001b[39m       \u001b[90m// Test subcommand (would be handled by subcommand parsing)\u001b[39m\n     \u001b[90m 233 |\u001b[39m       result \u001b[33m=\u001b[39m buildCmd\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'src/main.js'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'output'\u001b[39m])\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (tests/argument-processing.test.js:230:32)\n\n  ● Argument Processing › Complex Argument Scenarios › should handle positional options when enabled\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"json\"\n    Received: \"data.txt\"\n\n    \u001b[0m \u001b[90m 253 |\u001b[39m       \n     \u001b[90m 254 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'json'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'data.txt'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 255 |\u001b[39m       expect(result\u001b[33m.\u001b[39moptions\u001b[33m.\u001b[39mformat)\u001b[33m.\u001b[39mtoBe(\u001b[32m'json'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 256 |\u001b[39m       expect(result\u001b[33m.\u001b[39marguments)\u001b[33m.\u001b[39mtoEqual([\u001b[32m'data.txt'\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m 257 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 258 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toBe (tests/argument-processing.test.js:255:37)\n\n  ● Argument Processing › Argument Error Handling › should provide helpful error messages\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /missing required argument.*count/i\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 308 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 309 |\u001b[39m         command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'file.txt'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 310 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[35m/missing required argument.*count/i\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 311 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 312 |\u001b[39m\n     \u001b[90m 313 |\u001b[39m     test(\u001b[32m'should handle custom argument validation errors'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toThrow (tests/argument-processing.test.js:310:10)\n\n  ● Argument Processing › Argument Error Handling › should handle argument parsing with exit override\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: ObjectContaining {\"code\": StringContaining \"missing\"}\n\n    Number of calls: 0\n\n    \u001b[0m \u001b[90m 333 |\u001b[39m       command\u001b[33m.\u001b[39m_parseWithJS([])\u001b[33m;\u001b[39m\n     \u001b[90m 334 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 335 |\u001b[39m       expect(exitHandler)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\n     \u001b[90m     |\u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 336 |\u001b[39m         expect\u001b[33m.\u001b[39mobjectContaining({\n     \u001b[90m 337 |\u001b[39m           code\u001b[33m:\u001b[39m expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'missing'\u001b[39m)\n     \u001b[90m 338 |\u001b[39m         })\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/argument-processing.test.js:335:27)\n\nFAIL unit tests/subcommand-handling.test.js\n  ● Test suite failed to run\n\n    TypeError: Converting circular structure to JSON\n        --> starting at object with constructor 'Command'\n        |     property 'parent' -> object with constructor 'Command'\n        |     property 'commands' -> object with constructor 'Array'\n        --- index 0 closes the circle\n        at stringify (<anonymous>)\n\n      at messageParent (node_modules/jest-worker/build/workers/messageParent.js:29:19)\n\nFAIL unit tests/command-api.test.js\n  ● Test suite failed to run\n\n    TypeError: Converting circular structure to JSON\n        --> starting at object with constructor 'Command'\n        |     property 'commands' -> object with constructor 'Array'\n        |     index 0 -> object with constructor 'Command'\n        --- property 'parent' closes the circle\n        at stringify (<anonymous>)\n\n      at messageParent (node_modules/jest-worker/build/workers/messageParent.js:29:19)\n\n(node:20196) [DEP0111] DeprecationWarning: Access to process.binding('async_wrap') is deprecated.\n(Use `node --trace-deprecation ...` to show where the warning was created)\nFAIL unit tests/error-handling.test.js\n  Error Handling and Edge Cases\n    CommanderError Class\n      √ should create CommanderError with message only (58 ms)\n      √ should create CommanderError with all parameters (2 ms)\n      √ should maintain stack trace (67 ms)\n    InvalidArgumentError Class\n      √ should create InvalidArgumentError (2 ms)\n      √ should inherit from CommanderError (2 ms)\n    InvalidOptionArgumentError Class\n      √ should create InvalidOptionArgumentError (2 ms)\n    Missing Required Options\n      √ should handle missing required option (174 ms)\n      × should show help after error when configured (10 ms)\n      × should show custom help message after error (8 ms)\n    Unknown Options\n      × should handle unknown option (3 ms)\n      × should allow unknown options when configured (6 ms)\n      × should pass through unknown options when configured (1 ms)\n      √ should use custom unknown option handler (3 ms)\n    Missing Option Arguments\n      √ should handle missing option argument (3 ms)\n      × should handle missing option argument with custom message (3 ms)\n    Invalid Option Values\n      √ should handle invalid option parser (4 ms)\n      × should handle choice validation errors (1 ms)\n      √ should handle custom option validation (3 ms)\n    Missing Required Arguments\n      × should handle missing required argument (2 ms)\n      × should validate required arguments during parsing (2 ms)\n    Excess Arguments\n      √ should handle excess arguments (4 ms)\n      √ should allow excess arguments when configured (2 ms)\n      √ should use custom excess argument handler (2 ms)\n    Unknown Commands\n      × should handle unknown command (4 ms)\n      × should show suggestions for unknown commands (2 ms)\n      √ should use custom suggestion generator (2 ms)\n    Conflicting Options\n      × should handle conflicting options (133 ms)\n      × should detect option conflicts during validation (42 ms)\n    Exit Override\n      √ should use exit override for errors (3 ms)\n      × should use default exit override (37 ms)\n      √ should handle async command errors with exit override (1 ms)\n    Error Display Configuration\n      √ should configure error output (1 ms)\n      √ should write error output using configured writer (2 ms)\n      √ should write output using configured writer (1 ms)\n    Parsing Edge Cases\n      √ should handle empty argument array (3 ms)\n      × should handle double dash separator (4 ms)\n      √ should handle combined short options (2 ms)\n      √ should handle option with equals sign (1 ms)\n      √ should handle negated boolean options (2 ms)\n    Environment Variable Errors\n      √ should handle invalid environment variable values (3 ms)\n      × should handle missing required environment variables (2 ms)\n    Action Execution Errors\n      √ should handle action execution errors (2 ms)\n      √ should handle async action errors (4 ms)\n      √ should execute post-action hooks even when action fails (3 ms)\n    Hook Execution Errors\n      √ should handle hook execution errors (2 ms)\n      √ should handle async hook errors (1 ms)\n    WASM Integration Error Handling\n      √ should handle WASM loading failures gracefully (1 ms)\n      × should handle WASM operation failures (2 ms)\n    Complex Error Scenarios\n      √ should handle multiple validation errors (3 ms)\n      √ should handle nested command errors (5 ms)\n      √ should handle option group validation errors (3 ms)\n\n  ● Error Handling and Edge Cases › Missing Required Options › should show help after error when configured\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"required option\"\n    Received\n           1: \"error: required option '-f, --file <path>' not specified\n    \", \"utf8\"\n           2: \"\n    \", \"utf8\"\n           3: \"Usage: test [options]·\n    Options:\n      -f, --file <path>  input file\n      -h, --help         display help for command\n    \", \"utf8\"\n\n    Number of calls: 3\n\n    \u001b[0m \u001b[90m 85 |\u001b[39m       command\u001b[33m.\u001b[39mmissingMandatoryOptionValue(command\u001b[33m.\u001b[39moptions[\u001b[35m0\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m 86 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 87 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'required option'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 88 |\u001b[39m       expect(exitSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 89 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 90 |\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:87:25)\n\n  ● Error Handling and Edge Cases › Missing Required Options › should show custom help message after error\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"Use --help for usage\"\n    Received\n           1: \"error: required option '-f, --file <path>' not specified\n    \", \"utf8\"\n           2: \"Use --help for usage information\n    \", \"utf8\"\n\n    Number of calls: 2\n\n    \u001b[0m \u001b[90m  95 |\u001b[39m       command\u001b[33m.\u001b[39mmissingMandatoryOptionValue(command\u001b[33m.\u001b[39moptions[\u001b[35m0\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m  96 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  97 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'Use --help for usage'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m  98 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m  99 |\u001b[39m   })\u001b[33m;\u001b[39m\n     \u001b[90m 100 |\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:97:25)\n\n  ● Error Handling and Edge Cases › Unknown Options › should handle unknown option\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"unknown option\"\n    Received: \"error: unknown option '--invalid'\n    \", \"utf8\"\n\n    Number of calls: 1\n\n    \u001b[0m \u001b[90m 103 |\u001b[39m       command\u001b[33m.\u001b[39munknownOption(\u001b[32m'--invalid'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 104 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 105 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'unknown option'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 106 |\u001b[39m       expect(exitSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 107 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 108 |\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:105:25)\n\n  ● Error Handling and Edge Cases › Unknown Options › should allow unknown options when configured\n\n    CommanderError: error: too many arguments. Expected 0 arguments but got 2.\n\n    \u001b[0m \u001b[90m 2494 |\u001b[39m                     \u001b[36mconst\u001b[39m s \u001b[33m=\u001b[39m expected \u001b[33m===\u001b[39m \u001b[35m1\u001b[39m \u001b[33m?\u001b[39m \u001b[32m''\u001b[39m \u001b[33m:\u001b[39m \u001b[32m's'\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 2495 |\u001b[39m                     \u001b[36mconst\u001b[39m forSubcommand \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mparent \u001b[33m?\u001b[39m \u001b[32m` for '${this.name()}'`\u001b[39m \u001b[33m:\u001b[39m \u001b[32m''\u001b[39m\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2496 |\u001b[39m                     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${args.length}.`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2497 |\u001b[39m                 }\n     \u001b[90m 2498 |\u001b[39m             }\n     \u001b[90m 2499 |\u001b[39m\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2496:27)\n      at Object._parseWithJS (tests/error-handling.test.js:112:30)\n\n  ● Error Handling and Edge Cases › Unknown Options › should pass through unknown options when configured\n\n    CommanderError: error: too many arguments. Expected 0 arguments but got 3.\n\n    \u001b[0m \u001b[90m 2494 |\u001b[39m                     \u001b[36mconst\u001b[39m s \u001b[33m=\u001b[39m expected \u001b[33m===\u001b[39m \u001b[35m1\u001b[39m \u001b[33m?\u001b[39m \u001b[32m''\u001b[39m \u001b[33m:\u001b[39m \u001b[32m's'\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 2495 |\u001b[39m                     \u001b[36mconst\u001b[39m forSubcommand \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mparent \u001b[33m?\u001b[39m \u001b[32m` for '${this.name()}'`\u001b[39m \u001b[33m:\u001b[39m \u001b[32m''\u001b[39m\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2496 |\u001b[39m                     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${args.length}.`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2497 |\u001b[39m                 }\n     \u001b[90m 2498 |\u001b[39m             }\n     \u001b[90m 2499 |\u001b[39m\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2496:27)\n      at Object._parseWithJS (tests/error-handling.test.js:120:30)\n\n  ● Error Handling and Edge Cases › Missing Option Arguments › should handle missing option argument with custom message\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"argument missing\"\n    Received: \"error: option '-f, --file <path>' argument missing\n    \", \"utf8\"\n\n    Number of calls: 1\n\n    \u001b[0m \u001b[90m 149 |\u001b[39m       command\u001b[33m.\u001b[39moptionMissingArgument(option)\u001b[33m;\u001b[39m\n     \u001b[90m 150 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 151 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'argument missing'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 152 |\u001b[39m       expect(exitSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 153 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 154 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:151:25)\n\n  ● Error Handling and Edge Cases › Invalid Option Values › should handle choice validation errors\n\n    TypeError: option.choices is not a function\n\n    \u001b[0m \u001b[90m 173 |\u001b[39m     test(\u001b[32m'should handle choice validation errors'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 174 |\u001b[39m       \u001b[36mconst\u001b[39m option \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39mcreateOption(\u001b[32m'-l, --level <level>'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'log level'\u001b[39m)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 175 |\u001b[39m       option\u001b[33m.\u001b[39mchoices([\u001b[32m'debug'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'info'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'warn'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'error'\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 176 |\u001b[39m       command\u001b[33m.\u001b[39maddOption(option)\u001b[33m;\u001b[39m\n     \u001b[90m 177 |\u001b[39m       \n     \u001b[90m 178 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.choices (tests/error-handling.test.js:175:14)\n\n  ● Error Handling and Edge Cases › Missing Required Arguments › should handle missing required argument\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"missing required argument\"\n    Received: \"error: missing required argument 'file'\n    \", \"utf8\"\n\n    Number of calls: 1\n\n    \u001b[0m \u001b[90m 203 |\u001b[39m       command\u001b[33m.\u001b[39mmissingArgument(\u001b[32m'file'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 204 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 205 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'missing required argument'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 206 |\u001b[39m       expect(exitSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 207 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:205:25)\n\n  ● Error Handling and Edge Cases › Missing Required Arguments › should validate required arguments during parsing\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /missing required argument/i\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 213 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 214 |\u001b[39m         command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'source.txt'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 215 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[35m/missing required argument/i\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 216 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 217 |\u001b[39m   })\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m\u001b[0m\n\n      at Object.toThrow (tests/error-handling.test.js:215:10)\n\n  ● Error Handling and Edge Cases › Unknown Commands › should handle unknown command\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"unknown command\"\n    Received: \"error: unknown command 'unknown'\n    Available commands: build\n    \", \"utf8\"\n\n    Number of calls: 1\n\n    \u001b[0m \u001b[90m 252 |\u001b[39m       command\u001b[33m.\u001b[39munknownCommand()\u001b[33m;\u001b[39m\n     \u001b[90m 253 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 254 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'unknown command'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 255 |\u001b[39m       expect(exitSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 256 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 257 |\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:254:25)\n\n  ● Error Handling and Edge Cases › Unknown Commands › should show suggestions for unknown commands\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"build\"\n    Received: \"error: unknown command 'buil'\n    Did you mean 'build'?\n    \", \"utf8\"\n\n    Number of calls: 1\n\n    \u001b[0m \u001b[90m 263 |\u001b[39m       command\u001b[33m.\u001b[39munknownCommand()\u001b[33m;\u001b[39m\n     \u001b[90m 264 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 265 |\u001b[39m       expect(stderrSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'build'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 266 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 267 |\u001b[39m\n     \u001b[90m 268 |\u001b[39m     test(\u001b[32m'should use custom suggestion generator'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toHaveBeenCalledWith (tests/error-handling.test.js:265:25)\n\n  ● Error Handling and Edge Cases › Conflicting Options › should handle conflicting options\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /cannot be used with/i\n    Received message: \"Conflicting options: -v, --verbose and -q, --quiet\"\n\n        \u001b[0m \u001b[90m 2518 |\u001b[39m                 \u001b[36mthrow\u001b[39m error\u001b[33m;\u001b[39m\n         \u001b[90m 2519 |\u001b[39m             }\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2520 |\u001b[39m             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(error\u001b[33m.\u001b[39mmessage)\u001b[33m;\u001b[39m\n         \u001b[90m      |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 2521 |\u001b[39m         }\n         \u001b[90m 2522 |\u001b[39m     }\n         \u001b[90m 2523 |\u001b[39m\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2520:19)\n      at _parseWithJS (tests/error-handling.test.js:286:17)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/error-handling.test.js:287:10)\n      at Object.toThrow (tests/error-handling.test.js:287:10)\n\n  ● Error Handling and Edge Cases › Conflicting Options › should detect option conflicts during validation\n\n    expect(received).toThrow(expected)\n\n    Expected pattern: /cannot be used with/i\n    Received message: \"Conflicting options: -v, --verbose and -q, --quiet\"\n\n        \u001b[0m \u001b[90m 2990 |\u001b[39m                         \n         \u001b[90m 2991 |\u001b[39m                         \u001b[36mif\u001b[39m (conflictIsSet) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2992 |\u001b[39m                             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`Conflicting options: ${option.flags} and ${conflictOption.flags}`\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m      |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 2993 |\u001b[39m                         }\n         \u001b[90m 2994 |\u001b[39m                     }\n         \u001b[90m 2995 |\u001b[39m                 }\u001b[0m\n\n      at Command._validateOptionConstraints (src/command.js:2992:35)\n      at _validateOptionConstraints (tests/error-handling.test.js:304:17)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/error-handling.test.js:305:10)\n      at Object.toThrow (tests/error-handling.test.js:305:10)\n\n  ● Error Handling and Edge Cases › Exit Override › should use default exit override\n\n    expect(received).toThrow(expected)\n\n    Expected constructor: CommanderError\n    Received constructor: CommanderError\n\n    Received message: \"Test error\"\n\n        \u001b[0m \u001b[90m 2725 |\u001b[39m     _exit(exitCode\u001b[33m,\u001b[39m code\u001b[33m,\u001b[39m message) {\n         \u001b[90m 2726 |\u001b[39m         \u001b[36mif\u001b[39m (\u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m_exitCallback) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2727 |\u001b[39m             \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m_exitCallback(\u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(exitCode\u001b[33m,\u001b[39m code\u001b[33m,\u001b[39m message))\u001b[33m;\u001b[39m\n         \u001b[90m      |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 2728 |\u001b[39m             \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n         \u001b[90m 2729 |\u001b[39m         }\n         \u001b[90m 2730 |\u001b[39m         process\u001b[33m.\u001b[39mexit(exitCode)\u001b[33m;\u001b[39m\u001b[0m\n\n      at Command._exit (src/command.js:2727:32)\n      at Command._exit (src/command.js:2722:14)\n      at error (tests/error-handling.test.js:329:17)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/error-handling.test.js:330:10)\n      at Object.toThrow (tests/error-handling.test.js:330:10)\n\n  ● Error Handling and Edge Cases › Parsing Edge Cases › should handle double dash separator\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected value: \"--not-an-option\"\n    Received array: [[\"--not-an-option\", \"file.txt\"]]\n\n    \u001b[0m \u001b[90m 389 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'-v'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'--'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'--not-an-option'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'file.txt'\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m 390 |\u001b[39m       expect(result\u001b[33m.\u001b[39moptions\u001b[33m.\u001b[39mverbose)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 391 |\u001b[39m       expect(result\u001b[33m.\u001b[39marguments)\u001b[33m.\u001b[39mtoContain(\u001b[32m'--not-an-option'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 392 |\u001b[39m       expect(result\u001b[33m.\u001b[39marguments)\u001b[33m.\u001b[39mtoContain(\u001b[32m'file.txt'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 393 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 394 |\u001b[39m\u001b[0m\n\n      at Object.toContain (tests/error-handling.test.js:391:32)\n\n  ● Error Handling and Edge Cases › Environment Variable Errors › should handle missing required environment variables\n\n    CommanderError: Environment variable error: Required environment variable MISSING_KEY is not set\n\n    \u001b[0m \u001b[90m 4216 |\u001b[39m         } \u001b[36mcatch\u001b[39m (error) {\n     \u001b[90m 4217 |\u001b[39m             \u001b[36mif\u001b[39m (options\u001b[33m.\u001b[39mrequired) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 4218 |\u001b[39m                 \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`Environment variable error: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 4219 |\u001b[39m             }\n     \u001b[90m 4220 |\u001b[39m             \u001b[90m// If not required, continue with default value\u001b[39m\n     \u001b[90m 4221 |\u001b[39m             \u001b[36mif\u001b[39m (options\u001b[33m.\u001b[39mdefaultValue \u001b[33m!==\u001b[39m undefined) {\u001b[0m\n\n      at Command.envOption (src/command.js:4218:23)\n      at Object.envOption (tests/error-handling.test.js:447:15)\n\n  ● Error Handling and Edge Cases › WASM Integration Error Handling › should handle WASM operation failures\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n    \u001b[0m \u001b[90m 542 |\u001b[39m       \n     \u001b[90m 543 |\u001b[39m       \u001b[90m// Should not throw, should log warning\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 544 |\u001b[39m       expect(consoleSpy)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 545 |\u001b[39m       \n     \u001b[90m 546 |\u001b[39m       consoleSpy\u001b[33m.\u001b[39mmockRestore()\u001b[33m;\u001b[39m\n     \u001b[90m 547 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalled (tests/error-handling.test.js:544:26)\n\nFAIL unit tests/option-processing.test.js\n  Option Processing System\n    Boolean Options\n      √ should handle basic boolean options (80 ms)\n      √ should handle short boolean flags (2 ms)\n      √ should use default value when not provided (6 ms)\n    Negatable Options\n      √ should handle negatable options (6 ms)\n      √ should recognize negated flags (6 ms)\n    Value Options\n      √ should handle options with required values (6 ms)\n      √ should handle options with optional values (2 ms)\n      √ should throw error when required value is missing (161 ms)\n    Variadic Options\n      √ should handle variadic options (5 ms)\n      √ should initialize variadic options with empty array (2 ms)\n    Choice Options\n      √ should handle options with predefined choices (2 ms)\n      × should throw error for invalid choices (350 ms)\n    Custom Option Parsers\n      √ should handle custom integer parser (1 ms)\n      √ should handle custom float parser (1 ms)\n      × should handle custom list parser (1 ms)\n      × should handle custom JSON parser (1 ms)\n      √ should throw error for invalid custom parser input (2 ms)\n    Environment Variable Options\n      √ should read from environment variables (4 ms)\n      √ should prefer command line over environment (1 ms)\n    Required Options\n      √ should validate required options (2 ms)\n      √ should pass validation when required option is provided (1 ms)\n    Option Groups\n      √ should handle mutually exclusive options (3 ms)\n      √ should handle required option groups (2 ms)\n    Option Conflicts and Implications\n      × should handle conflicting options (68 ms)\n      × should handle option implications (1 ms)\n    OptionProcessor\n      √ should process boolean options (1 ms)\n      √ should process value options (1 ms)\n      √ should process variadic options (1 ms)\n      √ should validate all options (11 ms)\n    Built-in Parsers\n      √ should parse integers correctly (6 ms)\n      √ should parse floats correctly (2 ms)\n      √ should parse booleans correctly (2 ms)\n      √ should parse lists correctly (1 ms)\n      √ should parse JSON correctly (2 ms)\n    Enhanced Option Processing Integration\n      √ should handle environment variable precedence correctly (2 ms)\n      × should handle option preprocessing and postprocessing (7 ms)\n      × should handle advanced option validation (1 ms)\n      √ should handle complex option groups with mixed constraints (5 ms)\n      × should handle variadic options with custom parsers (8 ms)\n      √ should handle option implications correctly (1 ms)\n      × should handle conflicting options correctly (38 ms)\n      √ should handle validated options with custom validation (5 ms)\n\n  ● Option Processing System › Choice Options › should throw error for invalid choices\n\n    expect(received).toThrow(expected)\n\n    Expected substring: \"Invalid choice for option -l, --level <level>. Expected one of: debug, info, warn, error\"\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 118 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 119 |\u001b[39m         command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'--level'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'invalid'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 120 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[32m'Invalid choice for option -l, --level <level>. Expected one of: debug, info, warn, error'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 121 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 122 |\u001b[39m   })\u001b[33m;\u001b[39m\n     \u001b[90m 123 |\u001b[39m\u001b[0m\n\n      at Object.toThrow (tests/option-processing.test.js:120:10)\n\n  ● Option Processing System › Custom Option Parsers › should handle custom list parser\n\n    CommanderError: Error processing option tags: value.split is not a function\n\n    \u001b[0m \u001b[90m 2868 |\u001b[39m             }\n     \u001b[90m 2869 |\u001b[39m         } \u001b[36mcatch\u001b[39m (error) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2870 |\u001b[39m             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`Error processing option ${flagName}: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2871 |\u001b[39m         }\n     \u001b[90m 2872 |\u001b[39m     }\n     \u001b[90m 2873 |\u001b[39m\u001b[0m\n\n      at Command._processOptionWithEnhancements (src/command.js:2870:19)\n      at Command._processOptionWithEnhancements [as _parseWithJS] (src/command.js:2398:42)\n      at Object._parseWithJS (tests/option-processing.test.js:142:30)\n\n  ● Option Processing System › Custom Option Parsers › should handle custom JSON parser\n\n    CommanderError: Error processing option config: Invalid JSON: \"[object Object]\" is not valid JSON\n\n    \u001b[0m \u001b[90m 2868 |\u001b[39m             }\n     \u001b[90m 2869 |\u001b[39m         } \u001b[36mcatch\u001b[39m (error) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2870 |\u001b[39m             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`Error processing option ${flagName}: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2871 |\u001b[39m         }\n     \u001b[90m 2872 |\u001b[39m     }\n     \u001b[90m 2873 |\u001b[39m\u001b[0m\n\n      at Command._processOptionWithEnhancements (src/command.js:2870:19)\n      at Command._processOptionWithEnhancements [as _parseWithJS] (src/command.js:2398:42)\n      at Object._parseWithJS (tests/option-processing.test.js:149:30)\n\n  ● Option Processing System › Option Conflicts and Implications › should handle conflicting options\n\n    expect(received).toThrow(expected)\n\n    Expected substring: \"Conflicting options: -v, --verbose and -q, --quiet\"\n    Received message:   \"error: unknown option '--verbose'\"\n\n        \u001b[0m \u001b[90m 2450 |\u001b[39m                         \n         \u001b[90m 2451 |\u001b[39m                         \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mhandled) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2452 |\u001b[39m                             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`error: unknown option '${arg}'`\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m      |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 2453 |\u001b[39m                         }\n         \u001b[90m 2454 |\u001b[39m                     }\n         \u001b[90m 2455 |\u001b[39m                 } \u001b[36melse\u001b[39m {\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2452:35)\n      at _parseWithJS (tests/option-processing.test.js:245:17)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/option-processing.test.js:246:10)\n      at Object.toThrow (tests/option-processing.test.js:246:10)\n\n  ● Option Processing System › Option Conflicts and Implications › should handle option implications\n\n    CommanderError: error: unknown option '--verbose'\n\n    \u001b[0m \u001b[90m 2450 |\u001b[39m                         \n     \u001b[90m 2451 |\u001b[39m                         \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mhandled) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2452 |\u001b[39m                             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(\u001b[32m`error: unknown option '${arg}'`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m      |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2453 |\u001b[39m                         }\n     \u001b[90m 2454 |\u001b[39m                     }\n     \u001b[90m 2455 |\u001b[39m                 } \u001b[36melse\u001b[39m {\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2452:35)\n      at Object._parseWithJS (tests/option-processing.test.js:260:30)\n\n  ● Option Processing System › Enhanced Option Processing Integration › should handle option preprocessing and postprocessing\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"processed-TEST\"\n    Received: \"test\"\n\n    \u001b[0m \u001b[90m 374 |\u001b[39m       \n     \u001b[90m 375 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'--number'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'test'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 376 |\u001b[39m       expect(result\u001b[33m.\u001b[39moptions\u001b[33m.\u001b[39mnumber)\u001b[33m.\u001b[39mtoBe(\u001b[32m'processed-TEST'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 377 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 378 |\u001b[39m\n     \u001b[90m 379 |\u001b[39m     test(\u001b[32m'should handle advanced option validation'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toBe (tests/option-processing.test.js:376:37)\n\n  ● Option Processing System › Enhanced Option Processing Integration › should handle advanced option validation\n\n    expect(received).toThrow(expected)\n\n    Expected substring: \"Custom validation failed: Port must be >= 1024\"\n\n    Received function did not throw\n\n    \u001b[0m \u001b[90m 390 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\n     \u001b[90m 391 |\u001b[39m         command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'--port'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'80'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 392 |\u001b[39m       })\u001b[33m.\u001b[39mtoThrow(\u001b[32m'Custom validation failed: Port must be >= 1024'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 393 |\u001b[39m       \n     \u001b[90m 394 |\u001b[39m       \u001b[90m// Should pass with valid port\u001b[39m\n     \u001b[90m 395 |\u001b[39m       command\u001b[33m.\u001b[39m_optionProcessor \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mOptionProcessor\u001b[39m()\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toThrow (tests/option-processing.test.js:392:10)\n\n  ● Option Processing System › Enhanced Option Processing Integration › should handle variadic options with custom parsers\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 3\n\n      Array [\n    -   1,\n    -   2,\n    -   3,\n    +   \"1\",\n    +   \"2\",\n    +   \"3\",\n      ]\n\n    \u001b[0m \u001b[90m 455 |\u001b[39m       \n     \u001b[90m 456 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m command\u001b[33m.\u001b[39m_parseWithJS([\u001b[32m'--numbers'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'1'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'--numbers'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'2'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'--numbers'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'3'\u001b[39m])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 457 |\u001b[39m       expect(result\u001b[33m.\u001b[39moptions\u001b[33m.\u001b[39mnumbers)\u001b[33m.\u001b[39mtoEqual([\u001b[35m1\u001b[39m\u001b[33m,\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m \u001b[35m3\u001b[39m])\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 458 |\u001b[39m       \n     \u001b[90m 459 |\u001b[39m       \u001b[90m// Should validate individual values\u001b[39m\n     \u001b[90m 460 |\u001b[39m       expect(() \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toEqual (tests/option-processing.test.js:457:38)\n\n  ● Option Processing System › Enhanced Option Processing Integration › should handle conflicting options correctly\n\n    expect(received).toThrow(expected)\n\n    Expected substring: \"Option -v, --verbose cannot be used with option -q, --quiet\"\n    Received message:   \"Conflicting options: -v, --verbose and -q, --quiet\"\n\n        \u001b[0m \u001b[90m 2518 |\u001b[39m                 \u001b[36mthrow\u001b[39m error\u001b[33m;\u001b[39m\n         \u001b[90m 2519 |\u001b[39m             }\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2520 |\u001b[39m             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mCommanderError\u001b[39m(error\u001b[33m.\u001b[39mmessage)\u001b[33m;\u001b[39m\n         \u001b[90m      |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 2521 |\u001b[39m         }\n         \u001b[90m 2522 |\u001b[39m     }\n         \u001b[90m 2523 |\u001b[39m\u001b[0m\n\n      at Command._parseWithJS (src/command.js:2520:19)\n      at _parseWithJS (tests/option-processing.test.js:479:17)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/option-processing.test.js:480:10)\n      at Object.toThrow (tests/option-processing.test.js:480:10)\n\nTest Suites: 5 failed, 1 passed, 6 total\nTests:       35 failed, 94 passed, 129 total\nSnapshots:   0 total\nTime:        4.501 s, estimated 7 s\nRan all test suites.\n",
    "WASM loading test failed: WASM loading test failed: ENOENT: no such file or directory, open 'D:\\cm\\wasm\\gocommander.wasm'\n"
  ],
  "warnings": []
}